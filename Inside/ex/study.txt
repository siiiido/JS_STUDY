하루에 2개씩 공부하기

FIRST DAY

js데이터 타입 ->기본타입 ->
                          number, string, boolean, undefined, null

             ->참조타입 ->
                          객체 ->
                                 배열, 함수, 정규표현식

정수형이 따로 없음, 모든 숫자를 실수로 처리
  var num = 5/2;
  console.log(num) -> 2.5
  console.log(Math.floor(num)) -> 2

문자열(string)는 한 번 정의되면 변하지않음, 문자 배열처럼 인덱스를 이용해 접근 가능
  var str = "test";
  console.log(str[0]) -> t
  str[0] = "A"
  console.log(str[0]) -> t  //변하지 않으니 A가 나오지 않는다(수정 불가능)

null VS undefined
  null 과 undefined 는 등록, 저장 여부이다.
  null 은 값은 값이지만 값으로써 의미없는 특별한 값이 등록되어 있는 것이고,
  undefined 는 등록이 되어있지 않기 때문에 초기화도 정의되지도 않은 것이다.
  undefined 는 미리 선언된 전역변수(전역 객체의 프로퍼티)이며,
  null 은 선언,등록을 하는 키워드인 것이다.
  그리고 null의 type은 null이 아니라 object이다.


until 3.2


Second DAY

기본 타입의 함수 호출 방식  : 값에 의한 호출(call by value)
  함수를 호출할 때 인자로 기본 타입의 값을 넘길 경우, 호출된 함수의
  매개변수로 복사된 값이 전달됨 따라서 함수 내부에서 매개변수를 이용해 값을
  변경해도 실제로 호출된 변수의 값은 변경되지 않음
참조 타입의 함수 호출 방식 : 참조에 의한 호출(call by reference)
  함수를 호출할 때 인자로 참조 타입인 객체를 전달할 경우, 객체의 프로퍼티값이
  함수의 매개변수로 복사되지 않고, 인자로 넘긴 객체의 참조값이 그대로 함수 내부로 전달
  따라서 함수 내부에서 참조값을 이용해서 인자로 넘긴 실제 객체의 값을 변경가능

var a = 100;
var objA = {value:100};

function changeArg(num, obj){
  num = 200;
  obj.value=200;

  console.log(num);
  console.log(obj);
}

changeArg(a,objA); -> 200 {value : 200}
console.log(a); -> 100
console.log(objA); -> {value : 200}

a의 값이 changeArg함수 적용했을 때는 200이지만 그냥 호출했을 때는
값이 100임 -> 값에 의한 호출
objA는 {value : 100}에서 함수 적용 후 그냥 호출했을 때는
값이  {value:200} 즉 값이 변경돼서 돌아오지 않음 ->참조에 의한 호출
